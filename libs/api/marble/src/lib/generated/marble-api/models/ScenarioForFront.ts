/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScenarioDeployment } from './ScenarioDeployment';
import {
    ScenarioDeploymentFromJSON,
    ScenarioDeploymentFromJSONTyped,
    ScenarioDeploymentToJSON,
} from './ScenarioDeployment';
import type { ScenarioVersionForFront } from './ScenarioVersionForFront';
import {
    ScenarioVersionForFrontFromJSON,
    ScenarioVersionForFrontFromJSONTyped,
    ScenarioVersionForFrontToJSON,
} from './ScenarioVersionForFront';

/**
 * 
 * @export
 * @interface ScenarioForFront
 */
export interface ScenarioForFront {
    /**
     * 
     * @type {string}
     * @memberof ScenarioForFront
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ScenarioForFront
     */
    creationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof ScenarioForFront
     */
    authorId: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioForFront
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioForFront
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ScenarioForFront
     */
    mainTable: string;
    /**
     * 
     * @type {Array<ScenarioVersionForFront>}
     * @memberof ScenarioForFront
     */
    versions: Array<ScenarioVersionForFront>;
    /**
     * 
     * @type {Array<ScenarioDeployment>}
     * @memberof ScenarioForFront
     */
    deployments: Array<ScenarioDeployment>;
}

/**
 * Check if a given object implements the ScenarioForFront interface.
 */
export function instanceOfScenarioForFront(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "creationDate" in value;
    isInstance = isInstance && "authorId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "mainTable" in value;
    isInstance = isInstance && "versions" in value;
    isInstance = isInstance && "deployments" in value;

    return isInstance;
}

export function ScenarioForFrontFromJSON(json: any): ScenarioForFront {
    return ScenarioForFrontFromJSONTyped(json, false);
}

export function ScenarioForFrontFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScenarioForFront {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'creationDate': (new Date(json['creation_date'])),
        'authorId': json['author_id'],
        'name': json['name'],
        'description': json['description'],
        'mainTable': json['main_table'],
        'versions': ((json['versions'] as Array<any>).map(ScenarioVersionForFrontFromJSON)),
        'deployments': ((json['deployments'] as Array<any>).map(ScenarioDeploymentFromJSON)),
    };
}

export function ScenarioForFrontToJSON(value?: ScenarioForFront | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'creation_date': (value.creationDate.toISOString()),
        'author_id': value.authorId,
        'name': value.name,
        'description': value.description,
        'main_table': value.mainTable,
        'versions': ((value.versions as Array<any>).map(ScenarioVersionForFrontToJSON)),
        'deployments': ((value.deployments as Array<any>).map(ScenarioDeploymentToJSON)),
    };
}

