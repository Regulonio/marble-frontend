/* tslint:disable */
/* eslint-disable */
/**
 * Marble API
 * Consume Marble internal endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateScenarioIterationBody,
  ScenarioIteration,
  ScenarioIterationWithBody,
  UpdateScenarioIterationBody,
} from '../models';
import {
    CreateScenarioIterationBodyFromJSON,
    CreateScenarioIterationBodyToJSON,
    ScenarioIterationFromJSON,
    ScenarioIterationToJSON,
    ScenarioIterationWithBodyFromJSON,
    ScenarioIterationWithBodyToJSON,
    UpdateScenarioIterationBodyFromJSON,
    UpdateScenarioIterationBodyToJSON,
} from '../models';

export interface CreateScenarioIterationRequest {
    createScenarioIterationBody: CreateScenarioIterationBody;
}

export interface GetScenarioIterationRequest {
    scenarioIterationId: string;
}

export interface ListScenarioIterationsRequest {
    scenarioId?: string;
}

export interface UpdateScenarioIterationRequest {
    scenarioIterationId: string;
    updateScenarioIterationBody: UpdateScenarioIterationBody;
}

/**
 * 
 */
export class ScenarioIterationsApi extends runtime.BaseAPI {

    /**
     * Create a scenario iteration for a given `scenarioId`
     * Create a scenario iteration
     */
    async createScenarioIterationRaw(requestParameters: CreateScenarioIterationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioIterationWithBody>> {
        if (requestParameters.createScenarioIterationBody === null || requestParameters.createScenarioIterationBody === undefined) {
            throw new runtime.RequiredError('createScenarioIterationBody','Required parameter requestParameters.createScenarioIterationBody was null or undefined when calling createScenarioIteration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iterations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScenarioIterationBodyToJSON(requestParameters.createScenarioIterationBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioIterationWithBodyFromJSON(jsonValue));
    }

    /**
     * Create a scenario iteration for a given `scenarioId`
     * Create a scenario iteration
     */
    async createScenarioIteration(requestParameters: CreateScenarioIterationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioIterationWithBody> {
        const response = await this.createScenarioIterationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a scenario iteration by id
     */
    async getScenarioIterationRaw(requestParameters: GetScenarioIterationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioIterationWithBody>> {
        if (requestParameters.scenarioIterationId === null || requestParameters.scenarioIterationId === undefined) {
            throw new runtime.RequiredError('scenarioIterationId','Required parameter requestParameters.scenarioIterationId was null or undefined when calling getScenarioIteration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iterations/{scenarioIterationId}`.replace(`{${"scenarioIterationId"}}`, encodeURIComponent(String(requestParameters.scenarioIterationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioIterationWithBodyFromJSON(jsonValue));
    }

    /**
     * Get a scenario iteration by id
     */
    async getScenarioIteration(requestParameters: GetScenarioIterationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioIterationWithBody> {
        const response = await this.getScenarioIterationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List iterations corresponding to filters
     * List iterations
     */
    async listScenarioIterationsRaw(requestParameters: ListScenarioIterationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScenarioIteration>>> {
        const queryParameters: any = {};

        if (requestParameters.scenarioId !== undefined) {
            queryParameters['scenarioId'] = requestParameters.scenarioId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iterations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScenarioIterationFromJSON));
    }

    /**
     * List iterations corresponding to filters
     * List iterations
     */
    async listScenarioIterations(requestParameters: ListScenarioIterationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScenarioIteration>> {
        const response = await this.listScenarioIterationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a scenario iteration
     */
    async updateScenarioIterationRaw(requestParameters: UpdateScenarioIterationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioIterationWithBody>> {
        if (requestParameters.scenarioIterationId === null || requestParameters.scenarioIterationId === undefined) {
            throw new runtime.RequiredError('scenarioIterationId','Required parameter requestParameters.scenarioIterationId was null or undefined when calling updateScenarioIteration.');
        }

        if (requestParameters.updateScenarioIterationBody === null || requestParameters.updateScenarioIterationBody === undefined) {
            throw new runtime.RequiredError('updateScenarioIterationBody','Required parameter requestParameters.updateScenarioIterationBody was null or undefined when calling updateScenarioIteration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iterations/{scenarioIterationId}`.replace(`{${"scenarioIterationId"}}`, encodeURIComponent(String(requestParameters.scenarioIterationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScenarioIterationBodyToJSON(requestParameters.updateScenarioIterationBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioIterationWithBodyFromJSON(jsonValue));
    }

    /**
     * Update a scenario iteration
     */
    async updateScenarioIteration(requestParameters: UpdateScenarioIterationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioIterationWithBody> {
        const response = await this.updateScenarioIterationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
