/* tslint:disable */
/* eslint-disable */
/**
 * Marble API
 * Consume Marble internal endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateScenarioPublicationBody,
  PublicationAction,
  ScenarioPublication,
} from '../models';
import {
    CreateScenarioPublicationBodyFromJSON,
    CreateScenarioPublicationBodyToJSON,
    PublicationActionFromJSON,
    PublicationActionToJSON,
    ScenarioPublicationFromJSON,
    ScenarioPublicationToJSON,
} from '../models';

export interface CreateScenarioPublicationRequest {
    createScenarioPublicationBody: CreateScenarioPublicationBody;
}

export interface GetScenarioPublicationRequest {
    scenarioPublicationId: string;
}

export interface ListScenarioPublicationsRequest {
    scenarioId?: string;
    scenarioIterationId?: string;
    publicationAction?: PublicationAction;
}

/**
 * 
 */
export class ScenarioPublicationsApi extends runtime.BaseAPI {

    /**
     * Create a scenario publication
     */
    async createScenarioPublicationRaw(requestParameters: CreateScenarioPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScenarioPublication>>> {
        if (requestParameters.createScenarioPublicationBody === null || requestParameters.createScenarioPublicationBody === undefined) {
            throw new runtime.RequiredError('createScenarioPublicationBody','Required parameter requestParameters.createScenarioPublicationBody was null or undefined when calling createScenarioPublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-publications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScenarioPublicationBodyToJSON(requestParameters.createScenarioPublicationBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScenarioPublicationFromJSON));
    }

    /**
     * Create a scenario publication
     */
    async createScenarioPublication(requestParameters: CreateScenarioPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScenarioPublication>> {
        const response = await this.createScenarioPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a scenario publication by id
     */
    async getScenarioPublicationRaw(requestParameters: GetScenarioPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioPublication>> {
        if (requestParameters.scenarioPublicationId === null || requestParameters.scenarioPublicationId === undefined) {
            throw new runtime.RequiredError('scenarioPublicationId','Required parameter requestParameters.scenarioPublicationId was null or undefined when calling getScenarioPublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-publications/{scenarioPublicationId}`.replace(`{${"scenarioPublicationId"}}`, encodeURIComponent(String(requestParameters.scenarioPublicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioPublicationFromJSON(jsonValue));
    }

    /**
     * Get a scenario publication by id
     */
    async getScenarioPublication(requestParameters: GetScenarioPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioPublication> {
        const response = await this.getScenarioPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List scenario publications using provided filters
     * List scenario publications
     */
    async listScenarioPublicationsRaw(requestParameters: ListScenarioPublicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScenarioPublication>>> {
        const queryParameters: any = {};

        if (requestParameters.scenarioId !== undefined) {
            queryParameters['scenarioId'] = requestParameters.scenarioId;
        }

        if (requestParameters.scenarioIterationId !== undefined) {
            queryParameters['scenarioIterationId'] = requestParameters.scenarioIterationId;
        }

        if (requestParameters.publicationAction !== undefined) {
            queryParameters['publicationAction'] = requestParameters.publicationAction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-publications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScenarioPublicationFromJSON));
    }

    /**
     * List scenario publications using provided filters
     * List scenario publications
     */
    async listScenarioPublications(requestParameters: ListScenarioPublicationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScenarioPublication>> {
        const response = await this.listScenarioPublicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
