/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BFFToCreate,
  HTTPValidationError,
  OrgToCreate,
  UserAgentToCreate,
  UserToCreate,
} from '../models';
import {
    BFFToCreateFromJSON,
    BFFToCreateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OrgToCreateFromJSON,
    OrgToCreateToJSON,
    UserAgentToCreateFromJSON,
    UserAgentToCreateToJSON,
    UserToCreateFromJSON,
    UserToCreateToJSON,
} from '../models';

export interface PostBffAgentRequest {
    bFFToCreate: BFFToCreate;
}

export interface PostOrganizationsRequest {
    orgToCreate: OrgToCreate;
}

export interface PostUserAgentsRequest {
    userAgentToCreate: UserAgentToCreate;
}

export interface PostUsersRequest {
    userToCreate: UserToCreate;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     *  Create Bff
     */
    async postBffAgentRaw(requestParameters: PostBffAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bFFToCreate === null || requestParameters.bFFToCreate === undefined) {
            throw new runtime.RequiredError('bFFToCreate','Required parameter requestParameters.bFFToCreate was null or undefined when calling postBffAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/bff-agent/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BFFToCreateToJSON(requestParameters.bFFToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     *  Create Bff
     */
    async postBffAgent(requestParameters: PostBffAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postBffAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Org
     */
    async postOrganizationsRaw(requestParameters: PostOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.orgToCreate === null || requestParameters.orgToCreate === undefined) {
            throw new runtime.RequiredError('orgToCreate','Required parameter requestParameters.orgToCreate was null or undefined when calling postOrganizations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/organizations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrgToCreateToJSON(requestParameters.orgToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create Org
     */
    async postOrganizations(requestParameters: PostOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Add User Agent To Org
     */
    async postUserAgentsRaw(requestParameters: PostUserAgentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userAgentToCreate === null || requestParameters.userAgentToCreate === undefined) {
            throw new runtime.RequiredError('userAgentToCreate','Required parameter requestParameters.userAgentToCreate was null or undefined when calling postUserAgents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/user-agents/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAgentToCreateToJSON(requestParameters.userAgentToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     *  Add User Agent To Org
     */
    async postUserAgents(requestParameters: PostUserAgentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postUserAgentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Users To Org
     */
    async postUsersRaw(requestParameters: PostUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userToCreate === null || requestParameters.userToCreate === undefined) {
            throw new runtime.RequiredError('userToCreate','Required parameter requestParameters.userToCreate was null or undefined when calling postUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToCreateToJSON(requestParameters.userToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Add Users To Org
     */
    async postUsers(requestParameters: PostUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
