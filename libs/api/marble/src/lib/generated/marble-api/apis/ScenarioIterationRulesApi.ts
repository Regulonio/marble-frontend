/* tslint:disable */
/* eslint-disable */
/**
 * Marble API
 * Consume Marble internal endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateScenarioIterationRuleBody,
  ScenarioIterationRule,
  UpdateScenarioIterationRuleBody,
} from '../models';
import {
    CreateScenarioIterationRuleBodyFromJSON,
    CreateScenarioIterationRuleBodyToJSON,
    ScenarioIterationRuleFromJSON,
    ScenarioIterationRuleToJSON,
    UpdateScenarioIterationRuleBodyFromJSON,
    UpdateScenarioIterationRuleBodyToJSON,
} from '../models';

export interface CreateScenarioIterationRuleRequest {
    createScenarioIterationRuleBody: CreateScenarioIterationRuleBody;
}

export interface GetScenarioIterationRuleRequest {
    ruleId: string;
}

export interface ListScenarioIterationRulesRequest {
    scenarioIterationId?: string;
}

export interface UpdateScenarioIterationRuleRequest {
    ruleId: string;
    updateScenarioIterationRuleBody: UpdateScenarioIterationRuleBody;
}

/**
 * 
 */
export class ScenarioIterationRulesApi extends runtime.BaseAPI {

    /**
     * Create a scenario iteration rule for a given `scenarioIterationId`
     * Create a scenario iteration rule
     */
    async createScenarioIterationRuleRaw(requestParameters: CreateScenarioIterationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioIterationRule>> {
        if (requestParameters.createScenarioIterationRuleBody === null || requestParameters.createScenarioIterationRuleBody === undefined) {
            throw new runtime.RequiredError('createScenarioIterationRuleBody','Required parameter requestParameters.createScenarioIterationRuleBody was null or undefined when calling createScenarioIterationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iteration-rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScenarioIterationRuleBodyToJSON(requestParameters.createScenarioIterationRuleBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioIterationRuleFromJSON(jsonValue));
    }

    /**
     * Create a scenario iteration rule for a given `scenarioIterationId`
     * Create a scenario iteration rule
     */
    async createScenarioIterationRule(requestParameters: CreateScenarioIterationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioIterationRule> {
        const response = await this.createScenarioIterationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a scenario iteration rule by id
     */
    async getScenarioIterationRuleRaw(requestParameters: GetScenarioIterationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioIterationRule>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling getScenarioIterationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iteration-rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioIterationRuleFromJSON(jsonValue));
    }

    /**
     * Get a scenario iteration rule by id
     */
    async getScenarioIterationRule(requestParameters: GetScenarioIterationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioIterationRule> {
        const response = await this.getScenarioIterationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List rules using provided filters
     * List rules
     */
    async listScenarioIterationRulesRaw(requestParameters: ListScenarioIterationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScenarioIterationRule>>> {
        const queryParameters: any = {};

        if (requestParameters.scenarioIterationId !== undefined) {
            queryParameters['scenarioIterationId'] = requestParameters.scenarioIterationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iteration-rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScenarioIterationRuleFromJSON));
    }

    /**
     * List rules using provided filters
     * List rules
     */
    async listScenarioIterationRules(requestParameters: ListScenarioIterationRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScenarioIterationRule>> {
        const response = await this.listScenarioIterationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a scenario iteration rule
     */
    async updateScenarioIterationRuleRaw(requestParameters: UpdateScenarioIterationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScenarioIterationRule>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling updateScenarioIterationRule.');
        }

        if (requestParameters.updateScenarioIterationRuleBody === null || requestParameters.updateScenarioIterationRuleBody === undefined) {
            throw new runtime.RequiredError('updateScenarioIterationRuleBody','Required parameter requestParameters.updateScenarioIterationRuleBody was null or undefined when calling updateScenarioIterationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenario-iteration-rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScenarioIterationRuleBodyToJSON(requestParameters.updateScenarioIterationRuleBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioIterationRuleFromJSON(jsonValue));
    }

    /**
     * Update a scenario iteration rule
     */
    async updateScenarioIterationRule(requestParameters: UpdateScenarioIterationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScenarioIterationRule> {
        const response = await this.updateScenarioIterationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
