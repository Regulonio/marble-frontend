/* tslint:disable */
/* eslint-disable */
/**
 * Marble API
 * Consume Marble internal endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateScenarioBody,
  Scenario,
  UpdateScenarioBody,
} from '../models';
import {
    CreateScenarioBodyFromJSON,
    CreateScenarioBodyToJSON,
    ScenarioFromJSON,
    ScenarioToJSON,
    UpdateScenarioBodyFromJSON,
    UpdateScenarioBodyToJSON,
} from '../models';

export interface CreateScenarioRequest {
    createScenarioBody: CreateScenarioBody;
}

export interface GetScenarioRequest {
    scenarioId: string;
}

export interface UpdateScenarioRequest {
    scenarioId: string;
    updateScenarioBody: UpdateScenarioBody;
}

/**
 * 
 */
export class ScenariosApi extends runtime.BaseAPI {

    /**
     * Create a scenario
     */
    async createScenarioRaw(requestParameters: CreateScenarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scenario>> {
        if (requestParameters.createScenarioBody === null || requestParameters.createScenarioBody === undefined) {
            throw new runtime.RequiredError('createScenarioBody','Required parameter requestParameters.createScenarioBody was null or undefined when calling createScenario.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScenarioBodyToJSON(requestParameters.createScenarioBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioFromJSON(jsonValue));
    }

    /**
     * Create a scenario
     */
    async createScenario(requestParameters: CreateScenarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scenario> {
        const response = await this.createScenarioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a scenario by id
     */
    async getScenarioRaw(requestParameters: GetScenarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scenario>> {
        if (requestParameters.scenarioId === null || requestParameters.scenarioId === undefined) {
            throw new runtime.RequiredError('scenarioId','Required parameter requestParameters.scenarioId was null or undefined when calling getScenario.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios/{scenarioId}`.replace(`{${"scenarioId"}}`, encodeURIComponent(String(requestParameters.scenarioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioFromJSON(jsonValue));
    }

    /**
     * Get a scenario by id
     */
    async getScenario(requestParameters: GetScenarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scenario> {
        const response = await this.getScenarioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List scenarios
     */
    async listScenariosRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Scenario>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScenarioFromJSON));
    }

    /**
     * List scenarios
     */
    async listScenarios(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Scenario>> {
        const response = await this.listScenariosRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a scenario
     */
    async updateScenarioRaw(requestParameters: UpdateScenarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scenario>> {
        if (requestParameters.scenarioId === null || requestParameters.scenarioId === undefined) {
            throw new runtime.RequiredError('scenarioId','Required parameter requestParameters.scenarioId was null or undefined when calling updateScenario.');
        }

        if (requestParameters.updateScenarioBody === null || requestParameters.updateScenarioBody === undefined) {
            throw new runtime.RequiredError('updateScenarioBody','Required parameter requestParameters.updateScenarioBody was null or undefined when calling updateScenario.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios/{scenarioId}`.replace(`{${"scenarioId"}}`, encodeURIComponent(String(requestParameters.scenarioId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScenarioBodyToJSON(requestParameters.updateScenarioBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioFromJSON(jsonValue));
    }

    /**
     * Update a scenario
     */
    async updateScenario(requestParameters: UpdateScenarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scenario> {
        const response = await this.updateScenarioRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
