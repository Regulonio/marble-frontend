/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ScenarioDeploymentToCreate,
  ScenarioForFront,
  ScenarioToCreate,
  ScenarioVersionToCreate,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ScenarioDeploymentToCreateFromJSON,
    ScenarioDeploymentToCreateToJSON,
    ScenarioForFrontFromJSON,
    ScenarioForFrontToJSON,
    ScenarioToCreateFromJSON,
    ScenarioToCreateToJSON,
    ScenarioVersionToCreateFromJSON,
    ScenarioVersionToCreateToJSON,
} from '../models';

export interface GetScenariosRequest {
    userId: string;
}

export interface PostScenariosRequest {
    scenarioToCreate: ScenarioToCreate;
}

export interface PostScenariosScenarioIdDeploymentsRequest {
    scenarioId: string;
    scenarioDeploymentToCreate: ScenarioDeploymentToCreate;
}

export interface PostScenariosScenarioIdVersionsRequest {
    scenarioId: string;
    scenarioVersionToCreate: ScenarioVersionToCreate;
}

/**
 * 
 */
export class ScenariosApi extends runtime.BaseAPI {

    /**
     * Get Scenarios
     */
    async getScenariosRaw(requestParameters: GetScenariosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScenarioForFront>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getScenarios.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScenarioForFrontFromJSON));
    }

    /**
     * Get Scenarios
     */
    async getScenarios(requestParameters: GetScenariosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScenarioForFront>> {
        const response = await this.getScenariosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Create Scenario
     */
    async postScenariosRaw(requestParameters: PostScenariosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.scenarioToCreate === null || requestParameters.scenarioToCreate === undefined) {
            throw new runtime.RequiredError('scenarioToCreate','Required parameter requestParameters.scenarioToCreate was null or undefined when calling postScenarios.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScenarioToCreateToJSON(requestParameters.scenarioToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     *  Create Scenario
     */
    async postScenarios(requestParameters: PostScenariosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postScenariosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Deploy Scenario Version
     */
    async postScenariosScenarioIdDeploymentsRaw(requestParameters: PostScenariosScenarioIdDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.scenarioId === null || requestParameters.scenarioId === undefined) {
            throw new runtime.RequiredError('scenarioId','Required parameter requestParameters.scenarioId was null or undefined when calling postScenariosScenarioIdDeployments.');
        }

        if (requestParameters.scenarioDeploymentToCreate === null || requestParameters.scenarioDeploymentToCreate === undefined) {
            throw new runtime.RequiredError('scenarioDeploymentToCreate','Required parameter requestParameters.scenarioDeploymentToCreate was null or undefined when calling postScenariosScenarioIdDeployments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios/{scenario_id}/deployments/`.replace(`{${"scenario_id"}}`, encodeURIComponent(String(requestParameters.scenarioId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScenarioDeploymentToCreateToJSON(requestParameters.scenarioDeploymentToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     *  Deploy Scenario Version
     */
    async postScenariosScenarioIdDeployments(requestParameters: PostScenariosScenarioIdDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postScenariosScenarioIdDeploymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Create Scenario Version
     */
    async postScenariosScenarioIdVersionsRaw(requestParameters: PostScenariosScenarioIdVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.scenarioId === null || requestParameters.scenarioId === undefined) {
            throw new runtime.RequiredError('scenarioId','Required parameter requestParameters.scenarioId was null or undefined when calling postScenariosScenarioIdVersions.');
        }

        if (requestParameters.scenarioVersionToCreate === null || requestParameters.scenarioVersionToCreate === undefined) {
            throw new runtime.RequiredError('scenarioVersionToCreate','Required parameter requestParameters.scenarioVersionToCreate was null or undefined when calling postScenariosScenarioIdVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Oauth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/scenarios/{scenario_id}/versions/`.replace(`{${"scenario_id"}}`, encodeURIComponent(String(requestParameters.scenarioId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScenarioVersionToCreateToJSON(requestParameters.scenarioVersionToCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     *  Create Scenario Version
     */
    async postScenariosScenarioIdVersions(requestParameters: PostScenariosScenarioIdVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postScenariosScenarioIdVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
